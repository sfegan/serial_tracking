// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "NET_VAstroDBResolver.h"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mObjectName = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/ObjectName:1.0", "ObjectName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ObjectName = _0RL_tc_VAstroDBResolver_mObjectName;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ObjectName = _0RL_tc_VAstroDBResolver_mObjectName;
#endif

static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mResolverName = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/ResolverName:1.0", "ResolverName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ResolverName = _0RL_tc_VAstroDBResolver_mResolverName;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ResolverName = _0RL_tc_VAstroDBResolver_mResolverName;
#endif

static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mObjectNameSeq = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/ObjectNameSeq:1.0", "ObjectNameSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_VAstroDBResolver_mObjectName, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ObjectNameSeq = _0RL_tc_VAstroDBResolver_mObjectNameSeq;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ObjectNameSeq = _0RL_tc_VAstroDBResolver_mObjectNameSeq;
#endif

static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mObjectType = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/ObjectType:1.0", "ObjectType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ObjectType = _0RL_tc_VAstroDBResolver_mObjectType;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ObjectType = _0RL_tc_VAstroDBResolver_mObjectType;
#endif

static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mAngleRad = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/AngleRad:1.0", "AngleRad", CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_AngleRad = _0RL_tc_VAstroDBResolver_mAngleRad;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_AngleRad = _0RL_tc_VAstroDBResolver_mAngleRad;
#endif

static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mEpoch = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/Epoch:1.0", "Epoch", CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_Epoch = _0RL_tc_VAstroDBResolver_mEpoch;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_Epoch = _0RL_tc_VAstroDBResolver_mEpoch;
#endif

static CORBA::PR_structMember _0RL_structmember_VAstroDBResolver_mObjectInfo[] = {
  {"resolver", _0RL_tc_VAstroDBResolver_mResolverName},
  {"name", _0RL_tc_VAstroDBResolver_mObjectName},
  {"aliases", _0RL_tc_VAstroDBResolver_mObjectNameSeq},
  {"type", _0RL_tc_VAstroDBResolver_mObjectType},
  {"ra_rad", _0RL_tc_VAstroDBResolver_mAngleRad},
  {"dec_rad", _0RL_tc_VAstroDBResolver_mAngleRad},
  {"epoch_J", _0RL_tc_VAstroDBResolver_mEpoch}
};

#ifdef _0RL_tc_VAstroDBResolver_mObjectInfo
#  undef _0RL_tc_VAstroDBResolver_mObjectInfo
#endif
static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mObjectInfo = CORBA::TypeCode::PR_struct_tc("IDL:VAstroDBResolver/ObjectInfo:1.0", "ObjectInfo", _0RL_structmember_VAstroDBResolver_mObjectInfo, 7, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ObjectInfo = _0RL_tc_VAstroDBResolver_mObjectInfo;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ObjectInfo = _0RL_tc_VAstroDBResolver_mObjectInfo;
#endif






static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mObjectInfoSeq = CORBA::TypeCode::PR_alias_tc("IDL:VAstroDBResolver/ObjectInfoSeq:1.0", "ObjectInfoSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_VAstroDBResolver_mObjectInfo, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ObjectInfoSeq = _0RL_tc_VAstroDBResolver_mObjectInfoSeq;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ObjectInfoSeq = _0RL_tc_VAstroDBResolver_mObjectInfoSeq;
#endif


static CORBA::TypeCode_ptr _0RL_tc_VAstroDBResolver_mResolveFailed = CORBA::TypeCode::PR_exception_tc("IDL:VAstroDBResolver/ResolveFailed:1.0", "ResolveFailed", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_ResolveFailed = _0RL_tc_VAstroDBResolver_mResolveFailed;
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_ResolveFailed = _0RL_tc_VAstroDBResolver_mResolveFailed;
#endif


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace VAstroDBResolver { 
  const ::CORBA::TypeCode_ptr _tc_Command = CORBA::TypeCode::PR_interface_tc("IDL:VAstroDBResolver/Command:1.0", "Command", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr VAstroDBResolver::_tc_Command = CORBA::TypeCode::PR_interface_tc("IDL:VAstroDBResolver/Command:1.0", "Command", &_0RL_tcTrack);
#endif

static void _0RL_VAstroDBResolver_mObjectNameSeq_marshal_fn(cdrStream& _s, void* _v)
{
  VAstroDBResolver::ObjectNameSeq* _p = (VAstroDBResolver::ObjectNameSeq*)_v;
  *_p >>= _s;
}
static void _0RL_VAstroDBResolver_mObjectNameSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  VAstroDBResolver::ObjectNameSeq* _p = new VAstroDBResolver::ObjectNameSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_VAstroDBResolver_mObjectNameSeq_destructor_fn(void* _v)
{
  VAstroDBResolver::ObjectNameSeq* _p = (VAstroDBResolver::ObjectNameSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const VAstroDBResolver::ObjectNameSeq& _s)
{
  VAstroDBResolver::ObjectNameSeq* _p = new VAstroDBResolver::ObjectNameSeq(_s);
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mObjectNameSeq,
               _0RL_VAstroDBResolver_mObjectNameSeq_marshal_fn,
               _0RL_VAstroDBResolver_mObjectNameSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, VAstroDBResolver::ObjectNameSeq* _sp)
{
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mObjectNameSeq,
               _0RL_VAstroDBResolver_mObjectNameSeq_marshal_fn,
               _0RL_VAstroDBResolver_mObjectNameSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, VAstroDBResolver::ObjectNameSeq*& _sp)
{
  return _a >>= (const VAstroDBResolver::ObjectNameSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const VAstroDBResolver::ObjectNameSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_VAstroDBResolver_mObjectNameSeq,
                    _0RL_VAstroDBResolver_mObjectNameSeq_unmarshal_fn,
                    _0RL_VAstroDBResolver_mObjectNameSeq_marshal_fn,
                    _0RL_VAstroDBResolver_mObjectNameSeq_destructor_fn,
                    _v)) {
    _sp = (const VAstroDBResolver::ObjectNameSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_VAstroDBResolver_mObjectInfo_marshal_fn(cdrStream& _s, void* _v)
{
  VAstroDBResolver::ObjectInfo* _p = (VAstroDBResolver::ObjectInfo*)_v;
  *_p >>= _s;
}
static void _0RL_VAstroDBResolver_mObjectInfo_unmarshal_fn(cdrStream& _s, void*& _v)
{
  VAstroDBResolver::ObjectInfo* _p = new VAstroDBResolver::ObjectInfo;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_VAstroDBResolver_mObjectInfo_destructor_fn(void* _v)
{
  VAstroDBResolver::ObjectInfo* _p = (VAstroDBResolver::ObjectInfo*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const VAstroDBResolver::ObjectInfo& _s)
{
  VAstroDBResolver::ObjectInfo* _p = new VAstroDBResolver::ObjectInfo(_s);
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mObjectInfo,
               _0RL_VAstroDBResolver_mObjectInfo_marshal_fn,
               _0RL_VAstroDBResolver_mObjectInfo_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, VAstroDBResolver::ObjectInfo* _sp)
{
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mObjectInfo,
               _0RL_VAstroDBResolver_mObjectInfo_marshal_fn,
               _0RL_VAstroDBResolver_mObjectInfo_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, VAstroDBResolver::ObjectInfo*& _sp)
{
  return _a >>= (const VAstroDBResolver::ObjectInfo*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const VAstroDBResolver::ObjectInfo*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_VAstroDBResolver_mObjectInfo,
                    _0RL_VAstroDBResolver_mObjectInfo_unmarshal_fn,
                    _0RL_VAstroDBResolver_mObjectInfo_marshal_fn,
                    _0RL_VAstroDBResolver_mObjectInfo_destructor_fn,
                    _v)) {
    _sp = (const VAstroDBResolver::ObjectInfo*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_VAstroDBResolver_mObjectInfoSeq_marshal_fn(cdrStream& _s, void* _v)
{
  VAstroDBResolver::ObjectInfoSeq* _p = (VAstroDBResolver::ObjectInfoSeq*)_v;
  *_p >>= _s;
}
static void _0RL_VAstroDBResolver_mObjectInfoSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  VAstroDBResolver::ObjectInfoSeq* _p = new VAstroDBResolver::ObjectInfoSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_VAstroDBResolver_mObjectInfoSeq_destructor_fn(void* _v)
{
  VAstroDBResolver::ObjectInfoSeq* _p = (VAstroDBResolver::ObjectInfoSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const VAstroDBResolver::ObjectInfoSeq& _s)
{
  VAstroDBResolver::ObjectInfoSeq* _p = new VAstroDBResolver::ObjectInfoSeq(_s);
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mObjectInfoSeq,
               _0RL_VAstroDBResolver_mObjectInfoSeq_marshal_fn,
               _0RL_VAstroDBResolver_mObjectInfoSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, VAstroDBResolver::ObjectInfoSeq* _sp)
{
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mObjectInfoSeq,
               _0RL_VAstroDBResolver_mObjectInfoSeq_marshal_fn,
               _0RL_VAstroDBResolver_mObjectInfoSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, VAstroDBResolver::ObjectInfoSeq*& _sp)
{
  return _a >>= (const VAstroDBResolver::ObjectInfoSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const VAstroDBResolver::ObjectInfoSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_VAstroDBResolver_mObjectInfoSeq,
                    _0RL_VAstroDBResolver_mObjectInfoSeq_unmarshal_fn,
                    _0RL_VAstroDBResolver_mObjectInfoSeq_marshal_fn,
                    _0RL_VAstroDBResolver_mObjectInfoSeq_destructor_fn,
                    _v)) {
    _sp = (const VAstroDBResolver::ObjectInfoSeq*)_v;
    return 1;
  }
  return 0;
}


static void _0RL_VAstroDBResolver_mResolveFailed_marshal_fn(cdrStream& _s, void* _v)
{
  const VAstroDBResolver::ResolveFailed* _p = (const VAstroDBResolver::ResolveFailed*)_v;
  *_p >>= _s;
}
static void _0RL_VAstroDBResolver_mResolveFailed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  VAstroDBResolver::ResolveFailed* _p = new VAstroDBResolver::ResolveFailed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_VAstroDBResolver_mResolveFailed_destructor_fn(void* _v)
{
  VAstroDBResolver::ResolveFailed* _p = (VAstroDBResolver::ResolveFailed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const VAstroDBResolver::ResolveFailed& _s)
{
  VAstroDBResolver::ResolveFailed* _p = new VAstroDBResolver::ResolveFailed(_s);
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mResolveFailed,
               _0RL_VAstroDBResolver_mResolveFailed_marshal_fn,
               _0RL_VAstroDBResolver_mResolveFailed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const VAstroDBResolver::ResolveFailed* _sp)
{
  _a.PR_insert(_0RL_tc_VAstroDBResolver_mResolveFailed,
               _0RL_VAstroDBResolver_mResolveFailed_marshal_fn,
               _0RL_VAstroDBResolver_mResolveFailed_destructor_fn,
               (VAstroDBResolver::ResolveFailed*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const VAstroDBResolver::ResolveFailed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_VAstroDBResolver_mResolveFailed,
                    _0RL_VAstroDBResolver_mResolveFailed_unmarshal_fn,
                    _0RL_VAstroDBResolver_mResolveFailed_marshal_fn,
                    _0RL_VAstroDBResolver_mResolveFailed_destructor_fn,
                    _v)) {
    _sp = (const VAstroDBResolver::ResolveFailed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cVAstroDBResolver_mResolveFailed(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const VAstroDBResolver::ResolveFailed & _ex = (const VAstroDBResolver::ResolveFailed &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cVAstroDBResolver_mResolveFailed (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const VAstroDBResolver::ResolveFailed* _ex = (const VAstroDBResolver::ResolveFailed*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cVAstroDBResolver_mResolveFailed {
public:
  _0RL_insertToAny_Singleton__cVAstroDBResolver_mResolveFailed() {
    VAstroDBResolver::ResolveFailed::insertToAnyFn = _0RL_insertToAny__cVAstroDBResolver_mResolveFailed;
    VAstroDBResolver::ResolveFailed::insertToAnyFnNCP = _0RL_insertToAnyNCP__cVAstroDBResolver_mResolveFailed;
  }
};
static _0RL_insertToAny_Singleton__cVAstroDBResolver_mResolveFailed _0RL_insertToAny_Singleton__cVAstroDBResolver_mResolveFailed_;

static void _0RL_VAstroDBResolver_mCommand_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_VAstroDBResolver_mCommand_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(VAstroDBResolver::Command::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_VAstroDBResolver_mCommand_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, VAstroDBResolver::Command_ptr _o)
{
  VAstroDBResolver::Command_ptr _no = VAstroDBResolver::Command::_duplicate(_o);
  _a.PR_insert(VAstroDBResolver::_tc_Command,
               _0RL_VAstroDBResolver_mCommand_marshal_fn,
               _0RL_VAstroDBResolver_mCommand_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, VAstroDBResolver::Command_ptr* _op)
{
  _a.PR_insert(VAstroDBResolver::_tc_Command,
               _0RL_VAstroDBResolver_mCommand_marshal_fn,
               _0RL_VAstroDBResolver_mCommand_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = VAstroDBResolver::Command::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, VAstroDBResolver::Command_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(VAstroDBResolver::_tc_Command,
                    _0RL_VAstroDBResolver_mCommand_unmarshal_fn,
                    _0RL_VAstroDBResolver_mCommand_marshal_fn,
                    _0RL_VAstroDBResolver_mCommand_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (VAstroDBResolver::Command_ptr)_r->_ptrToObjRef(VAstroDBResolver::Command::_PD_repoId);
    else
      _o = VAstroDBResolver::Command::_nil();
    return 1;
  }
  return 0;
}

